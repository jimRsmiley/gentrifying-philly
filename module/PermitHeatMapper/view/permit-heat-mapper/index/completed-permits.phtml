<div>
    
    <div id="map"></div>
    
    <div class="info project-info leaflet-control">
        <div class="credit row">
            <p>A <a href="http://codeforphilly.com/projects/Mapping_gentrification_and_decline_of_Philly_neighborhoods">Code for Philly</a> project by <a href="http://twitter.com/jimRsmiley">@jimRsmiley</a>    </p></div>
            
        
            <div class="project-description">
                <h2 style="text-align: center">Philadelphia Construction Permits by Neighborhood</h2>
                <p>
                    Can a change in the number of properties issued construction permits over time tell us anything about Philadelphia neighbohroods?   [ <a href="/about">more on the project</a> ]
                </p>
                <p><a href='/average-change'>View a map comparing the last two years against the previous 5 years</a></p>
                <p><a href="/data">View the data in table form</a></p>
            </div>
            <div style="padding: 12px 0">
                <form>
                    <label>Select a year comparison: </label>
                    <select id="yearselect">
                        <option value='{"method":"year-compare","start":2012,"end":2013}'>2012 to 2013</option>
                        <option value='{"method":"year-compare","start":2011,"end":2012}'>2011 to 2012</option>
                        <option value='{"method":"year-compare","start":2010,"end":2011}'>2010 to 2011</option>
                        <option value='{"method":"year-compare","start":2009,"end":2010}'>2008 to 2009</option>
                        <option value='{"method":"year-compare","start":2008,"end":2009}'>2007 to 2008</option>
                    </select>
                </form>
            </div>
            <div class="neighborhood-info"><b>Hover over a neighborhood</b></div>
    </div>
    <div class="info legend leaflet-control">
        <p>Percent Change</p>
        <i style="background:#e31a1c"></i> > 30<br>
        <i style="background:#fd8d3c"></i> 20 to 30<br>
        <i style="background:#fecc5c"></i> 10 to 20<br>
        <i style="background:#ffffb2"></i> 0 to 10<br>
        
        <i style="background:#f1eef6"></i> 0 to -10<br>
        <i style="background:#bdc9e1"></i> -10 to -20<br>
        <i style="background:#74a9cf"></i> -20 to -30<br>
        <i style="background:#0570b0"></i> < -30
    </div>
</div>

<script>

var spinner;

var startYear;
var endYear;

function loadData(map,start,end) {

    
    console.log(geoJsonLayer);
    if( typeof geoJsonLayer !== 'undefined' )
        map.removeLayer( geoJsonLayer );
    
    startYear = start;
    endYear = end;

    jQuery.each( geoJson.features, function(i, val) {
        startYearCount = val.properties['y'+start];
        val.properties['y'+start] = ( startYearCount === null ? 0 : startYearCount );

        endYearCount = val.properties['y'+end];
        val.properties['y'+end] = ( endYearCount === null ? 0 : endYearCount );
        percentChange = ( endYearCount-startYearCount ) / ( startYearCount ) *100;
        percentChange = percentChange.toFixed(1);

        if( percentChange === 'Infinity' ) {
            percentChange = 'n/a';
        }

        val.properties.percentChange = percentChange;
    });
    
    update = function (props) {

        $('.neighborhood-info').html( function() {
            return (props ? '<b><h3 class="neighborhood-name">' + props.neighborhood_name + '</h3></b>'
            +'<div class="neighborhood-info">'
            + 'number of locations issued permits<br/>'
            + startYear + ': ' + props["y"+startYear] + '<br/>'
            + endYear + ': ' + props["y"+endYear] + '<br/>'
            + '<span class="percent-info">percent change: <b>' + props.percentChange + '&#37;</b></span>'
            +'<div>'
            : '<b>Hover over a neighborhood</b>');
            });
    };

    // get color depending on population density value
    function getColor(percentChange) {
        return percentChange === 'n/a' ? "#FFF" :
               percentChange > 30  ? '#e31a1c' :
               percentChange > 20  ? '#fd8d3c' :
               percentChange > 10  ? '#fecc5c' :
               percentChange > 0   ? '#ffffb2' :

               percentChange < -30 ? '#0570b0' :
               percentChange < -20 ? '#74a9cf' :
               percentChange < -10 ? '#bdc9e1' :
               percentChange < 0   ? '#f1eef6' :

            '#FFF';
    }

    function style(feature) {
        return {
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 1,
            fillColor: getColor(feature.properties.percentChange)
        };
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera) {
            layer.bringToFront();
        }

        update(layer.feature.properties);
    }

    var geojson;

    function resetHighlight(e) {
        geoJsonLayer.resetStyle(e.target);
        update();
    }

    function onEachFeature(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
        });
    }

    geoJsonLayer = L.geoJson(geoJson, {
        style: style,
        onEachFeature: onEachFeature
    }).addTo(map);

    map.fitBounds( geoJsonLayer, { padding: [0,0] } );
    map.spin(false);
}

getSpinnerOptions = function() {
    return {
        lines: 17, // The number of lines to draw
        length: 40, // The length of each line
        width: 30, // The line thickness
        radius: 60, // The radius of the inner circle
        corners: 1, // Corner roundness (0..1)
        rotate: 48, // The rotation offset
        direction: 1, // 1: clockwise, -1: counterclockwise
        color: '#000', // #rgb or #rrggbb or array of colors
        speed: 0.8, // Rounds per second
        trail: 60, // Afterglow percentage
        shadow: true, // Whether to render a shadow
        hwaccel: false, // Whether to use hardware acceleration
        className: 'spinner', // The CSS class to assign to the spinner
        zIndex: 2e9, // The z-index (defaults to 2000000000)
        top: 'auto', // Top position relative to parent in px
        left: 'auto' // Left position relative to parent in px
    };
}

var geoJson;
var geoJsonLayer;

$( document ).ready( function() {

    var map = L.map('map');
    var url = "/permit-heat-mapper/neighborhood-permit-count/location-completed-counts-by-neighborhood-as-geojson";
    
    L.tileLayer('http://{s}.tile.cloudmade.com/8c0d0781b408405ea240b26856e5fdf2/{styleId}/256/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://cloudmade.com">CloudMade</a>',
        maxZoom: 18,
        styleId: 28046
    }).addTo(map);
    map.attributionControl.addAttribution('Neighborhood borders provided by <a href="http://www.azavea.com/blogs/newsletter/v8i2/philly-neighborhoods-map/">Azavea</a>');
    
    map.spin(true, getSpinnerOptions() );
    $.ajax({
        url: url,
        context: document.body,
        success: function( data ) {
            geoJson = data;
            console.log( 'loaded data from: ' + window.location.origin + url );
            loadData(map,2012,2013);
        }
    });
    
    $("select").change( function() {
        var selectedOptions = $( "select option:selected" );
        console.log('they want to change years');
        json = JSON.parse(selectedOptions[0].value);
        console.log( json );
        loadData(map,json.start,json.end);
        map.spin(false, getSpinnerOptions() );
    });
  });
</script>